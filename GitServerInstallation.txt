Install/Setup And Configure Git Server with Gitolite and GitWeb on CENTOS 7

1. 透過SSH搭建Git Server
   1.1. 若專案使用人數不多的情況下，可以使用最簡單的SSH連線方式，透過統一的git帳
        號共同存取git server上的.git file；也就是建立一個帳號(git)，再由git這個
        帳號統一管理(commit/push)等
   1.2. 若想要控管User/Project的權限，並且也控管branch/tag等讀寫權限，就必須安裝
        Gitolite等等的套件來達成需求
        -- Gitolite可以管理"誰"可以存取哪個專案
        -- Gitolite可以管理"誰"可以存取哪個專案，並且，可以限制只能存取哪個
           branch等路徑

2. Gitolite and the Git control flow
   ┌───────────────────────────────────────────────────────────────────┐
   │  User's Workstation                  Git Server                   │
   │  ┌──────────────┐                 ┌─────────────────────────┐     │
   │  │  Git client  │                 │  git-uploa-pack         │     │
   │  └──────────────┘                 │  (or git-receive-pack)  │     │
   │    │                              └─────────────────────────┘     │
   │    │                                │                             │
   │    │ (git clone/fetch/push)         │                             │
   │    │                                │                             │
   │    │                                │                             │
   │    │                                │                             │
   │  ┌──────────────┐                 ┌──────────────┐                │
   │  │     ssh      │───────────────  │     sshd     │                │
   │  └──────────────┘                 └──────────────┘                │
   └───────────────────────────────────────────────────────────────────┘

   ┌───────────────────────────────────────────────────────────────────┐
   │  User's Workstation                  Git Server                   │
   │  ┌──────────────┐                 ┌─────────────────────────┐     │
   │  │  Git client  │                 │  git-uploa-pack         │     │
   │  └──────────────┘                 │  (or git-receive-pack)  │     │
   │    │                              └─────────────────────────┘     │
   │    │                                │                             │
   │    │ (git clone/fetch/push)         │                             │
   │    │                                │                             │
   │    │                              ┌─────────────────────────┐     │
   │    │                              │  gitolite-shell         │     │
   │    │                              └─────────────────────────┘     │
   │    │                                │                             │
   │    │                                │                             │
   │  ┌──────────────┐                 ┌──────────────┐                │
   │  │     ssh      │───────────────  │     sshd     │                │
   │  └──────────────┘                 └──────────────┘                │
   └───────────────────────────────────────────────────────────────────┘

3. Installing Gitolite
   Preparing the server environment
   ═════════════════════════════════════════════════════════════════════════════
   Package                    Version
   ─────────────────────────────────────────────────────────────────────────────
   VMware Workstation         8.0.2
   CentOS 64-bit              7.0.1406
   Git x86_64                 1.8.3.1-4.el7
   Gitolite
   GitWeb
   ═════════════════════════════════════════════════════════════════════════════

   Git
     -- is a very popular and efficient open source Version Control System.
   Gitolite
     -- is an access control layer on top of git.
   GitWeb
     -- is used for viewing git repositories detail via Web Browser.

   3.1. 系統套件安裝
        3.1.1. Git套件安裝
        ┌──────────────────────────────────────────────────────────────────────┐
        │[root@localhost ~]# yum install git                                   │
        │[root@localhost ~]# git --version                                     │
        │git version 1.8.3.1                                                   │
        └──────────────────────────────────────────────────────────────────────┘
        3.2.1. Gitolite套件安裝流程概說
        3.2.2. 於欲安裝Gitolite套件的server上,先建立一個新帳戶, git。
        3.2.3. 於git home directory中下載Gitolite套件
        3.2.4. 安裝Gitolite套件
        3.2.5. 產生/配置Gitolite管理員公鑰

4. Gitolite套件安裝
   4.1. 建立Gitolite 管理者帳號
        -- Gitolite 建議建立全新的管理者帳號來使用，為了方便記憶，通常會使用
           git或gitolite來當帳號ID。
        -- 若使用已存在的帳號來當管理者帳號，必須確認帳號的家目錄下不存在以下檔案
           - ~/.gitolite.rc
           - ~/.gitolite
           - ~/repositories
           - ~/.ssh/authorized_keys.
        -- 建立帳號
           ┌─────────────────────────────────────────────────────────────────────┐
           │[root@localhost ~]# groupadd --system git                            │
           │[root@localhost ~]# useradd --system -G git git | passwd --stdin git │
           └─────────────────────────────────────────────────────────────────────┘
           - 在Google上看到的資料，都將group及帳號建立成system group 及
             system user，好像可以不一定要將group及帳號都建立成system group及
             system user。
           - 也因為將group及帳號都建立成system group及system user，所以，會看到有
             些人因為是要給system使用的帳號，而把git帳號的home directory建立在
             /home以外的地方來和一般使用者區別開來。
           - user 帳號不一定要給密碼，原因是之後會改成使用公鑰認證。

   4.2. Gitolite安裝前準備
        -- 於git帳號的home directory下建立名為bin的目錄，用於存放Gitolite的執行檔
           ┌───────────────────────────────────────────────────────────────────┐
           │[root@localhost ~]# su - git                                       │
           │[git@localhost ~]# mkdir -p ~/bin                                  │
           └───────────────────────────────────────────────────────────────────┘
        -- Get the software using git-clone
           ┌───────────────────────────────────────────────────────────────────┐
           │[git@localhost ~]# git clone git://github.com/sitaramc/gitolite    │
           │Cloning into 'gitolite'...                                         │
           │remote: Counting objects: 8941, done.                              │
           │remote: Compressing objects: 100% (9/9), done.                     │
           │remote: Total 8941 (delta 2), reused 0 (delta 0), pack-reused 8932 │
           │Receiving objects: 100% (8941/8941), 3.68 MiB | 92.00 KiB/s, done. │
           │Resolving deltas: 100% (5090/5090), done.                          │
           │[git@localhost ~]$ ls                                              │
           │bin  gitolite                                                      │
           └───────────────────────────────────────────────────────────────────┘
   4.3. Gitolite 安裝
        -- Gitolite has one server side command: gitolite.

        -- "Installation" consists deciding where to put it:
           - Keep the sources anywhere and use the full path to run the gitolite
             command.
           - Keep the sources anywhere and symlink just the gitolite program to
             some directory on your $PATH.
           - Copy the sources somewhere and use that path to run the gitolite
             command.
           - Option 2 is the best for general use, but here's the scoop on all
             of them:

             # option 1
             gitolite/install

             # option 2
             gitolite/install -ln
             # defaults to $HOME/bin (which is assumed to exist)
             #   ** or **
             # or use a specific directory (please supply FULL path):
             gitolite/install -ln /usr/local/bin

             # option 3
             # (again, please supply a FULL path)
             gitolite/install -to /usr/local/gitolite/bin
           - Creating a symlink doesn't need a separate program but 'install'
             also runs git describe to create a VERSION file, which can be very
             important if you want support
        -- 執行安裝
           ┌───────────────────────────────────────────────────────────────────┐
           │[git@localhost ~]# ./gitolite/install -ln $HOME/bin                │
           │ Can't locate Data/Dumper.pm in @INC (@INC contains: /home/git/    │
           │ gitolite/src/lib /usr/local/lib64/perl5 /usr/local/share/perl5    │
           │ /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl         │
           │ /usr/lib64/perl5 /usr/share/perl5 .) at /home/git/gitolite/src    │
           │ /lib/Gitolite/Common.pm line 61.                                  │
           │ BEGIN failed--compilation aborted at /home/git/gitolite/src/lib   │
           │ /Gitolite/Common.pm line 61.                                      │
           │ Compilation failed in require at ./gitolite/install line 15.      │
           │ BEGIN failed--compilation aborted at ./gitolite/install line 15.  │
           └───────────────────────────────────────────────────────────────────┘
           安装gitolite的时候，可能會出現錯誤
           Can't locate Data/Dumper.pm in @INC
           這是由於沒有安裝相對應的perl套件所造成，需要切換回root再進行安裝所需套
           件
           ┌───────────────────────────────────────────────────────────────────┐
           │[root@localhost ~]# perl -MCPAN -e shell                           │
           │                                                                   │
           │cpan[1]> install Data::Dumper                                      │
           └───────────────────────────────────────────────────────────────────┘
            如果是首次使用CPAN就會進行一定的配置，在詢問是否自動配置時，輸入yes即
            可。

            但使用CPAN時可能會出现錯誤
           ┌───────────────────────────────────────────────────────────────────┐
           │ Can't locate CPAN.pm in @INC                                      │
           └───────────────────────────────────────────────────────────────────┘
           這是由於沒有安裝CPAN而造成的錯誤，進行安裝
           ┌───────────────────────────────────────────────────────────────────┐
           │[root@localhost ~]# yum install perl-CPAN -y                       │
           └───────────────────────────────────────────────────────────────────┘
           完成安裝後，Can't locate Data/Dumper.pm in @INC 這個問題就解決了。
           再回到git帳號，進行gitolite安裝，完成後，bin資料夾中就會出現相對應的
		   文件，到此，gitolite就安装成功了。
		   ┌───────────────────────────────────────────────────────────────────┐
		   │[git@localhost ~]$ ./gitolite/install -ln $HOME/bin                │
           │[git@localhost ~]$ ls                                              │
           │bin  gitolite                                                      │
           │[git@localhost ~]$ ls -l bin                                       │
           │total 0                                                            │
           │lrwxrwxrwx. 1 git git 31 May 28 02:28 gitolite ->                  │
		   │/home/git/gitolite/src/gitolite                                    │
           └───────────────────────────────────────────────────────────────────┘

5. Gitolite Setup
   5.1. 建立Gitolite管理員密鑰
        -- 先前已經將git帳號定義為Gitolite的管理員帳號，因此就為git建立密鑰。
		   ┌───────────────────────────────────────────────────────────────────┐
           │[git@localhost ~]$ ssh-keygen -t rsa -C "Gitolite admin"           │
           │Generating public/private rsa key pair.                            │
           │Enter file in which to save the key (/home/git/.ssh/id_rsa):       │
           │Created directory '/home/git/.ssh'.                                │
           │Enter passphrase (empty for no passphrase):                        │
           │Enter same passphrase again:                                       │
           │Your identification has been saved in /home/git/.ssh/id_rsa.       │
           │Your public key has been saved in /home/git/.ssh/id_rsa.pub.       │
           │The key fingerprint is:                                            │
           │ce:b3:a4:95:fc:1f:d2:64:66:af:f3:50:c4:ad:93:59 Gitolite admin     │
           │The key's randomart image is:                                      │
           │+--[ RSA 2048]----+                                                │
           │|                 |                                                │
           │|             . . |                                                │
           │|              o E|                                                │
           │|             . = |                                                │
           │|        S   = *  |                                                │
           │|       + . * o . |                                                │
           │|        O . + .  |                                                │
           │|       + + ..+   |                                                │
           │|      . . ..oo.  |                                                │
           │+-----------------+                                                │
		   │[git@localhost ~]$ mkdir -p tmp                                    │
		   │[git@localhost ~]$ cp ./.ssh/id_rsa.pub ./tmp/gitolite_admin.pub   │
           └───────────────────────────────────────────────────────────────────┘
   5.2. 使用管理員公鑰初始化gitolite
        -- Gitolite 安裝完成後，需要使用剛剛建立的公鑰來將gitolite初始化，此公鑰
           將成為gitolite的第一個管理員
           ┌───────────────────────────────────────────────────────────────────────────────┐
           │[git@localhost ~]$ ./bin/gitolite setup -pk ./tmp/gitolite_admin.pub           │
           │Initialized empty Git repository in /home/git/repositories/gitolite-admin.git/ │
           │Initialized empty Git repository in /home/git/repositories/testing.git/        │
           │WARNING: /home/git/.ssh/authorized_keys missing; creating a new one            │
           │(this is normal on a brand new install)                                        │
           │[git@localhost ~]$                                                             │
           └───────────────────────────────────────────────────────────────────────────────┘
           - 初始化空的Git repository 於 /home/git/repositories/gitolite-admin.git/
           - 初始化空的Git repository 於 /home/git/repositories/testing.git/

           到此，Gitolite的初始化已經完成
